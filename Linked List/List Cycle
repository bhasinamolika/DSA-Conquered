Problem Description

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Try solving it using constant additional space.

Example:

Input: 


              ______
             |     |
             \/    |
    1 -> 2 -> 3 -> 4


Return the node corresponding to node 3. 
<____________________________________________________________________________________>

SOLUTION:
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode A) {

        // check if head or next of head is null or not
        if (A == null || A.next == null) {
            return null;
        }
    
        /* This problem can be solved using floyd cycle detection principle */

        /* Assign two pointers: slow & fast */
        ListNode slow = A;
        ListNode fast = A;

        /* Using a loop try to find when slow == fast */
        do {
            slow = slow.next;

            /*
             If fast pointer becomes null means there is no cycle in the list
            */
            if (fast.next == null || fast.next.next == null)
                return null;

            fast = fast.next.next;

        } while (slow != fast);

        // Now move the slow pointer at the start of the list
        slow = A;

        // Move the slow and fast pointer at the same speed till both becomes equals
        while(slow != fast) {
            slow = slow.next;
            fast = fast.next;
        }

        // return the slow pointer
        return slow;
    }
}
