You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)

Output: 7 -> 0 -> 8

    342 + 465 = 807
Make sure there are no trailing zeros in the output list

So, 7 -> 0 -> 8 -> 0 is not a valid response even though the value is still 807.
<______________________________________________________________________________________>

SOLUTION:
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
     public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // Start typing your Java solution below
        // DO NOT write main() function
        return addTwoNumbersHelper(l1, l2);
    }
    
    public ListNode addTwoNumbersHelper(ListNode l1, ListNode l2) {
        ListNode node = null;
        if(l1!=null)
        node.next=l1;
         
        int sum = 0;
        int l1val=0;
        while(node.next!=null){

            l1val=l1val*10+node.val;
            node=node.next;

        }
        int l2val=0;
        node=null;
        if(l2!=null)
        node.next=l2;
        while(node.next!=null){

            l2val=l2val*10+node.val;
            node=node.next;
        }
        sum=l1val+l2val;
        ListNode ans=null;
        while(sum!=0){
            ans.val=sum%10;
            ans=ans.next;
            sum=sum/10;
        }
        return ans;
    }
}
