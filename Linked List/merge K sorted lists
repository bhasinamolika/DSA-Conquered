You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] is sorted in ascending order.
The sum of lists[i].length won't exceed 10^4.
<____________________________________________________________________>
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        if(lists.length == 1){
            return lists[0];
        }
        Queue<ListNode> que = new LinkedList<>();
        for(ListNode n : lists){
            que.add(n);
        }
        
        while(que.size() > 1){
            ListNode a = que.poll();
            ListNode b = null;
            if(!que.isEmpty()){
                b = que.poll();
            }
            ListNode c = merge(a, b);
            que.add(c);
        }
        return que.poll();
    }
    
    public ListNode merge(ListNode a, ListNode b){
        
        ListNode head = new ListNode(0);
        ListNode temp = head;

        while(a != null && b != null){
            if(a.val < b.val){
                head.next = a;
                a = a.next;
            } else {
                head.next = b;
                b = b.next;
            }
            head = head.next;
        }
        if(a == null){
            head.next = b;
        }
        if(b == null){
            head.next = a;
        }
        return temp.next;
    }
}
