Given a singly linked list and an integer K, reverses the nodes of the

list K at a time and returns modified linked list.

NOTE : The length of the list is divisible by K

Example :

Given linked list 1 -> 2 -> 3 -> 4 -> 5 -> 6 and K=2,

You should return 2 -> 1 -> 4 -> 3 -> 6 -> 5

Try to solve the problem using constant extra space.
<_________________________________________________________________________________>
SOLUTION:
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     public int val;
 *     public ListNode next;
 *     ListNode(int x) { val = x; next = null; }
 * }
 */
public class Solution {
    public ListNode reverseList(ListNode A, int B) {
        if(A==null || B==1)return A;
        ListNode dummy=new ListNode(0);
        dummy.next=A;
        ListNode cur=dummy,nex=dummy,pre=dummy;
        int count=0;
        while(cur.next!=null){cur=cur.next;
        count++;
        }
        while(count>=B){
            cur=pre.next;
            nex=cur.next;
            for(int i=1;i<B;i++){
                cur.next=nex.next;
                nex.next=pre.next;
                pre.next=nex;
                nex=cur.next;
                }
                pre=cur;
                count-=B;

            }
            return dummy.next;

        }
    }

