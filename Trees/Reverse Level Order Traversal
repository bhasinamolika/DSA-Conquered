Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-1000 <= Node.val <= 1000
<_____________________________________________________________________________________>
SOLUTION:
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans=new ArrayList<>();
        
        if(root!=null){
            Queue<TreeNode> Q=new LinkedList<>();
            Q.offer(root); 
            while(!Q.isEmpty()){
                ArrayList<Integer> innerList=new ArrayList<>();
                int count=Q.size();
                for(int i=0;i<count;i++){
                TreeNode temp=Q.poll();
                innerList.add(temp.val);
                if(temp.left!=null) Q.offer(temp.left);
                if(temp.right!=null) Q.offer(temp.right);
                
            }
                ans.add(innerList);
            }
            
        
        }
        Collections.reverse(ans);
        return ans;
    }
}
