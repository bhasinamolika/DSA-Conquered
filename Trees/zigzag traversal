Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100
<__________________________________________________________________________________________________>

SOLUTION:
class Solution {

public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
    Queue<TreeNode> q = new LinkedList<>();
    List<List<Integer>> res = new ArrayList<>();
    boolean flag = false;
    
    if(root==null)
        return res;
    q.add(root);
    
    while(!q.isEmpty()){
        int nodeCount = q.size();
        List<Integer> li = new ArrayList<>();
        
        while(nodeCount-- > 0)
        {
            TreeNode node = q.poll();
            li.add(node.val);
            if(node.left != null) q.add(node.left);
            if(node.right != null) q.add(node.right);
        }
        if(flag)
            Collections.reverse(li);
        res.add(li);
        flag = !flag;
    }
    return res;
}
}
