public class Solution {
    // DO NOT MODIFY BOTH THE LISTS
    public double findMedianSortedArrays(final List<Integer> a, final List<Integer> b) {
        if(a.size()>b.size()) return findMedianSortedArrays(b, a);
        
        int x = a.size();
        int y = b.size();
        
        int low = 0; int high = x;
        
        while(low<=high){
            int partitionX = (low+high)/2;
            int partitionY = (x+y+1)/2-partitionX;
            
            int leftMaxX = (partitionX==0)? Integer.MIN_VALUE: a.get(partitionX-1);
            int leftMaxY = (partitionY==0)? Integer.MIN_VALUE:b.get(partitionY-1);
            
            int rightMinX = (partitionX==x)? Integer.MAX_VALUE:a.get(partitionX);
            int rightMinY = (partitionY==y)? Integer.MAX_VALUE:b.get(partitionY);
            
            if((leftMaxX<=rightMinY)&& (leftMaxY<=rightMinX)){
                if((x+y)%2==0){
                    return ((double)Math.max(leftMaxX,leftMaxY)+Math.min(rightMinX, rightMinY))/2;
                }else{
                    return ((double)Math.max(leftMaxX, leftMaxY));
                }
           }else if(leftMaxX>rightMinY) {
               high = partitionX-1;
               
           }
           else low = partitionX+1;
    }
    return -1;
}}
